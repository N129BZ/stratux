package main

import (
	"database/sql"
	"fmt"
	"io"

	_ "github.com/mattn/go-sqlite3"
	"github.com/mitchellh/mapstructure"
)

func fillStructFromRow(row *sql.Rows, dest interface{}) error {
	colnames, _ := row.Columns()
	colvals := make([]interface{}, len(colnames))
	colptrs := make([]interface{}, len(colnames))
	for k, _ := range colvals {
		colptrs[k] = &colvals[k]
	}
	err := row.Scan(colptrs...)
	if err != nil {
		fmt.Printf("%s", err.Error())
		return err
	}
	asMap := make(map[string]interface{})
	for i, name := range colnames {
		asMap[name] = colvals[i]
	}
	return mapstructure.Decode(asMap, dest)
	// Hacky: just let the json module do the reflection handling for us..
	/*str, err := json.Marshal(asMap)
	if err != nil {
		return err
	}
	err = json.Unmarshal(str, &dest)
	return err*/
}


// Fetches all MySituations for the respective boot
func getMyTrack(db *sql.DB, bootid int, resultCb func(ts StratuxTimestamp, sit SituationData)) error {
	rows, err := db.Query("select * from timestamp inner join mySituation on timestamp.id=mySituation.timestamp_id " +
						"where StartupId=? AND SystemClock_value is not null order by StratuxClock_value", bootid)

	if err != nil {
		return err
	}
	defer rows.Close()
	for rows.Next() {
		var ts StratuxTimestamp
		var sit SituationData
		fillStructFromRow(rows, &ts)
		fillStructFromRow(rows, &sit)
		resultCb(ts, sit)
	}
	return nil
}


func openDb() (*sql.DB, error) {
	return sql.Open("sqlite3", dataLogFilef)
}

func exportGpx(bootid int, dst io.Writer) error {
	db, err := openDb()
	if err != nil {
		return err
	}

	dst.Write([]byte("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>\n"))
	dst.Write([]byte("<gpx version=\"1.1\" creator=\"Stratux\">\n"))
	dst.Write([]byte("<metadata>Generated by Stratux</metadata>\n")) // TODO: export info...
	dst.Write([]byte("<trk>\n"))
	dst.Write([]byte("<trkseg>\n"))

	getMyTrack(db, bootid, func(ts StratuxTimestamp, situation SituationData) {
		if situation.GPSLatitude == 0 && situation.GPSLongitude == 0 {
			return
		}
		dst.Write([]byte(fmt.Sprintf("<trkpt lat=\"%f\" lon=\"%f\">", situation.GPSLatitude, situation.GPSLongitude)))
		dst.Write([]byte(fmt.Sprintf("<ele>%f</ele>", situation.GPSAltitudeMSL)))
		dst.Write([]byte("</trkpt>"))
		//dst.Write([]byte(fmt.Sprintf("<time>%f</time>", situation.GPSAltitudeMSL)))
	})

	dst.Write([]byte("</trkseg>\n"))
	dst.Write([]byte("</trk>\n"))
	dst.Write([]byte("</gpx>\n"))
	return nil
}

func exportKml(bootids []int, dst io.Writer) error {
	return nil

}